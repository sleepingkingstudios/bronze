# frozen_string_literal: true

require 'bronze/collections'
require 'bronze/collections/null_query'
require 'bronze/not_implemented_error'

module Bronze::Collections
  # rubocop:disable Lint/UnusedMethodArgument

  # Abstract class defining the interface for collection adapters, which
  # allow collections to interact with different underlying data stores.
  class Adapter
    # Generates a collection name from a Module. By default, the collection name
    # is generated by taking the module #name, converting each segment to
    # snake_case, replacing each :: separator with a double underscore, and
    # pluralizing the final segment.
    #
    # @param mod [Class, Module] The class or module to name.
    #
    # @return [String] the collection name.
    def collection_name_for(mod)
      ary = tools.string.underscore(mod.name).split('::')

      [*ary[0...(ary.size - 1)], tools.string.pluralize(ary.last)].join('__')
    end

    # @return [Array<String>] the names of the collections available to the data
    #   store, such as SQL tables.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def collection_names
      raise Bronze::NotImplementedError.new(self, :collection_names)
    end

    # Deletes each item in the collection matching the given selector,
    # removing it from the collection.
    #
    # @param collection_name [String] The collection to delete.
    # @param selector [Hash] The criteria used to filter the data.
    #
    # @return [Bronze::Result] the result of the delete operation.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def delete_matching(collection_name:, selector:)
      raise Bronze::NotImplementedError.new(self, :delete_matching)
    end

    # Deletes the item in the collection matching the given primary key.
    #
    # @param collection_name [String] The collection to update.
    # @param primary_key [Symbol] The name of the primary key column or
    #   attribute.
    # @param primary_key_value [Object] The primary key value to search for.
    #
    # @return [Bronze::Result] the result of the delete operation.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def delete_one(collection_name:, primary_key:, primary_key_value:)
      raise Bronze::NotImplementedError.new(self, :delete_one)
    end

    # Finds all items in the collection matching the given selector.
    #
    # @param collection_name [String] The collection to query.
    # @param selector [Hash] The criteria used to filter the data.
    # @param limit [Integer] The maximum number of items to return. If nil or
    #   if no value is given, all matching items will be returned. Defaults
    #   to nil.
    # @param offset [Integer] The number of items to skip. If nil or if no
    #   value is given, all matching items will be returned. Defaults to nil.
    # @param order [String, Symbol, Array, Hash] See Query#order.
    #
    # @return [Bronze::Result] the result of the find operation.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def find_matching(
      collection_name:,
      selector:,
      limit: nil,
      offset: nil,
      order: nil
    )
      raise Bronze::NotImplementedError.new(self, :find_matching)
    end

    # Finds the data object with the given primary key.
    #
    # @param collection_name [String] The collection to query.
    # @param primary_key [Symbol] The name of the primary key column or
    #   attribute.
    # @param primary_key_value [Object] The primary key value to search for.
    #
    # @return [Bronze::Result] the result of the find operation.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def find_one(collection_name:, primary_key:, primary_key_value:)
      raise Bronze::NotImplementedError.new(self, :find_one)
    end

    # Inserts the data hash into the specified collection.
    #
    # @param collection_name [String] The collection to insert.
    # @param data [Hash] The data hash to insert.
    #
    # @return [Bronze::Result] the result of the insert operation.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def insert_one(collection_name:, data:)
      raise Bronze::NotImplementedError.new(self, :insert_one)
    end

    # @param collection_name [String] The collection to query.
    #
    # @return [Bronze::Collections::NullQuery] a mock query that acts as a query
    #   against an empty collection.
    def null_query(collection_name:)
      Bronze::Collections::NullQuery.new
    end

    # @param collection_name [String] The collection to query.
    #
    # @return [Bronze::Collections::Query] a query against the specified
    #   collection.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def query(collection_name:)
      raise Bronze::NotImplementedError.new(self, :query)
    end

    # Updates each item in the collection matching the given selector with the
    # specified data.
    #
    # @param collection_name [String] The collection to update.
    # @param selector [Hash] The criteria used to filter the data.
    # @param data [Hash] The keys and values to update in the matching items.
    #
    # @return [Bronze::Result] the result of the update operation.
    #
    # @raise Bronze::NotImplementedError unless overriden by an Adapter
    #   subclass.
    def update_matching(collection_name:, data:, selector:)
      raise Bronze::NotImplementedError.new(self, :update_matching)
    end

    # @overload update_one(collection_name, primary_key, value, data)
    #   Updates the item in the collection matching the given primary key with
    #   the specified data.
    #
    #   @param collection_name [String] The collection to update.
    #   @param primary_key [Symbol] The name of the primary key column or
    #     attribute.
    #   @param value [Object] The primary key value to search for.
    #   @param data [Hash] The keys and values to update in the matching item.
    #
    #   @return [Bronze::Result] the result of the update operation.
    #
    #   @raise Bronze::NotImplementedError unless overriden by an Adapter
    #     subclass.
    def update_one(collection_name:, data:, primary_key:, primary_key_value:)
      raise Bronze::NotImplementedError.new(self, :update_one)
    end

    private

    def tools
      SleepingKingStudios::Tools::Toolbelt.instance
    end
  end
  # rubocop:enable Lint/UnusedMethodArgument
end
